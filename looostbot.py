import datetime
import os
import logging
import psycopg2
from urllib.parse import urlparse
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
def get_db_connection():
    try:
        db_url = os.environ['DATABASE_URL']
        parsed = urlparse(db_url)
        
        conn = psycopg2.connect(
            dbname=parsed.path[1:],
            user=parsed.username,
            password=parsed.password,
            host=parsed.hostname,
            port=parsed.port,
            sslmode='require'
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
        raise

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS user_actions (
                        user_id BIGINT PRIMARY KEY,
                        first_activity TIMESTAMP DEFAULT NOW(),
                        last_activity TIMESTAMP DEFAULT NOW(),
                        actions_count INTEGER DEFAULT 1,
                        username TEXT
                    )
                """)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ username
                cursor.execute("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name='user_actions' AND column_name='username'
                """)
                if not cursor.fetchone():
                    cursor.execute("ALTER TABLE user_actions ADD COLUMN username TEXT")
                
                conn.commit()
                logger.info("–¢–∞–±–ª–∏—Ü–∞ user_actions –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
        raise

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π ---
async def log_action(user_id: int, username: str = None):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO user_actions (user_id, username)
                    VALUES (%s, %s)
                    ON CONFLICT (user_id) DO UPDATE SET
                        last_activity = NOW(),
                        actions_count = user_actions.actions_count + 1,
                        username = COALESCE(%s, user_actions.username)
                """, (user_id, username, username))
                conn.commit()
                logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {str(e)}")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
async def get_user_stats(user_id: int):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT first_activity, last_activity, actions_count
                    FROM user_actions
                    WHERE user_id = %s
                """, (user_id,))
                return cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return None

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")],
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üö™ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")]
    ], resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_action(user.id, user.username)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_keyboard()
    )

async def show_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await log_action(user.id)
    current_time = datetime.datetime.now().strftime("%H:%M:%S %d.%m.%Y")
    await update.message.reply_text(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    stats = await get_user_stats(user.id)
    
    if stats:
        first, last, count = stats
        message = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {last.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {count}"
        )
    else:
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    await update.message.reply_text(message)

async def stop_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    await context.application.stop()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['DATABASE_URL', 'TOKEN']
    missing_vars = [var for var in required_vars if var not in os.environ]
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(os.environ['TOKEN']).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Regex('^üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è$'), show_time))
    app.add_handler(MessageHandler(filters.Regex('^üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), show_stats))
    app.add_handler(MessageHandler(filters.Regex('^üö™ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞$'), stop_bot))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == '__main__':
    main()
